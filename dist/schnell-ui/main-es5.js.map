{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/http.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","httpService","cookieService","title","Username","Password","Status","Message","urlHack","window","open","token","date","Date","hour","getHours","min","getMinutes","newMin","newHour","data","Email","Token","getToken","sendPostRequest","subscribe","responseBody","set","resetForm","gotoWebsite","authenticateUser","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","HttpService","httpClient","apiBaseUrlDev","apiBaseUrlProd","apiBaseUrl","header","production","location","hostname","post","providedIn","environment","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from './services/http.service';\nimport * as _ from 'lodash';\nimport { CookieService } from 'ngx-cookie-service';\nimport { tokenize } from '@angular/compiler/src/ml_parser/lexer';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'schnell-ui';\n\n  public Username = '';\n  public Password = '';\n  public Status = '';\n  public Message = '';\n\n  constructor(public httpService: HttpService, public cookieService: CookieService) {\n    this.httpService = httpService;\n    this.cookieService = cookieService;\n  }\n\n  ngOnInit(): void {\n    // todo: put in check for cookie so see if already logged in\n  }\n\n  gotoWebsite(): void {\n    const urlHack = 'http://onecause.com';\n    window.open(urlHack, '_top');\n  }\n\n  getToken(): string {\n    let token = '';\n    const date = new Date();\n    const hour = date.getHours();\n    const min = date.getMinutes();\n    const newMin = min < 10 ? `0${min}` : `${min}`;\n    const newHour = hour < 10 ? `0${hour}` : `${hour}`;\n    token = `${newHour}${newMin}`;\n    return token\n  }\n\n  resetForm() {\n    this.Username = '';\n    this.Password = '';\n    this.Status = '';\n    this.Message = '';\n  }\n\n  authenticateUser(): void {\n    const data = {\n      Email: this.Username,\n      Password: this.Password,\n      Token: this.getToken()\n    };\n    this.httpService.sendPostRequest(data).subscribe((responseBody: any) => {\n      this.Status = _.get(responseBody, 'Status');\n      this.Message = _.get(responseBody, 'Message');\n      if (this.Status === 'success') {\n        this.cookieService.set('_uid', _.get(responseBody, 'SessionCookie'));\n        this.resetForm();\n        this.gotoWebsite();\n        return;\n      }\n    });\n  }\n\n}\n","\n<!-- Notes: More client-side validation of form elements would of been nice. -->\n<div class=\"content\" role=\"main\">\n  <div class=\"d-flex justify-content-md-center align-items-center vh-100\">\n    <div class=\"login-box shadow border rounded\">\n      <form class=\"p-3\">\n        <h5 class=\"text-center mt-2\">Login Schnell</h5>\n        <div class=\"form-group mt-5\">\n          <input type=\"username\" class=\"form-control\" id=\"Username\" name=\"Username\" aria-describedby=\"usernameHelp\" placeholder=\"Enter username\" [(ngModel)]='Username' [value]='Username'>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"password\" class=\"form-control\" id=\"Password\" name=\"Password\" placeholder=\"Enter password\" [(ngModel)]='Password' [value]='Password' minlength=8>\n          <small id=\"passwordHelp\" class=\"form-text text-muted\">Must be 8 atleast characters</small>\n        </div>\n        <button class=\"btn btn-primary\" (click)=\"authenticateUser()\">Login</button>\n        <div class=\"alert alert-danger mt-4\" *ngIf='Status === \"failed\"'>\n          <strong>Error: </strong>{{Message}}\n        </div>\n      </form>\n    </div>\n  </div>  \n</div>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { CookieService } from 'ngx-cookie-service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    CookieService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  public apiBaseUrlDev = ':3000/api/auth';\n  public apiBaseUrlProd = '/api/auth';\n  public apiBaseUrl = '';\n  public header = new HttpHeaders();\n  constructor(public httpClient: HttpClient) {\n      this.header.set('Access-Control-Allow-Origin', '*');\n      this.apiBaseUrl = environment.production ? this.apiBaseUrlProd : this.apiBaseUrlDev;\n      this.apiBaseUrl = `http://${window.location.hostname}${this.apiBaseUrl}`;\n  }\n\n  sendPostRequest(data: any): Observable<object> {\n    // generally an SSL or https connection would be used\n    return this.httpClient.post<any>(this.apiBaseUrl, data);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}